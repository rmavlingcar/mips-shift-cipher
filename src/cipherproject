# Ricky Mavlingcar
# MIPS Caesar/Shift Cipher
# CS3340.0U2 Computer Architecture

	.data
startmsg:		.asciiz "This program encrypts or decrypts text using a caesar(/shift) cipher.\nEnter E to encrypt or D to decrypt: \n>"
usrPromptResp:		.space	20
plaintextPrompt:	.asciiz "Enter plain text to be encrypted: \n>"
ciphertextPrompt:	.asciiz "Enter cipher text for decryption: \n>"
string:			.space	200
shiftAmt:		.asciiz "Enter key (cipher shift amount): \n>"
errInvalidKeyword:	.asciiz "\nPlease enter a valid character and try again.\n"
continuemsg:		.asciiz "\nEnter '1' to continue or '0' to exit: \n>"
exitmsg:    		.asciiz "\nThe program will now exit.\n"

	.text
main:
	la	$a0, startmsg		# Prompts the user for encryption or decryption
	li	$v0, 4
	syscall
	
	la	$a0, usrPromptResp	# read user input
	la	$a1, 5
	li	$v0, 8
	syscall 
	lb	$t2, 0($a0)
	
	beq	$t2, 69, plaintext	# break for encryption (ASCII 69 = E)
	beq	$t2, 68, ciphertext	# break for decryption (ASCII 68 = D)
	
	# Incorrect input 
	la	$a0, errInvalidKeyword
	li	$v0, 4
	syscall
	
	# Loops to main if user enters anything other than E or D
	j	main

plaintext:
	la	$a0, plaintextPrompt	# Prompts the user for plain text
	li	$v0, 4
	syscall
	
	la	$a0, string
	la	$a1, 200		# Reads upto a max of 200 characters
	li	$v0, 8
	syscall
	
	la	$t0,($a0)		# Entered string is stored in the t0 register
	li	$t1, 0			# track string length in register t1
	
	# Prompt for key (shift amount)
	la	$a0, shiftAmt		
	li	$v0, 4
	syscall
	
	li	$v0, 5
	syscall
	
	move	$t3, $v0 	# stores the key value in register t3

encryptChar:
	lb	$t4, 0($t0)	# The first character is read
	beq	$t4, 10, exit	# Terminate program on the \n 
	beqz	$t4, exit	# Terminate Program when the end of the string is reached
	jal	e_chkLowercase	# Check if the character is lower case
	
	# falls through to encryptChar2
	
encryptChar2:
	beq	$v0, 1, encryptLowercaseChar	# Encrypts lowercase characters
	beq	$v0, 0, encryptUppercaseChar	# Encrypts uppercase characters
	move	$a0, $t4			# if the character is not upper or lower, ignore and move back

e_printChar:
	li	$v0, 11		# print the encrypted characters
	syscall
	add	$t0, $t0, 1	# Points to the next character
	add	$t1, $t1, 1	# length is incremented
	j	encryptChar
 
ciphertext:
	la	$a0, ciphertextPrompt	# Prompts user for the cipher text
	li	$v0, 4
	syscall
	la	$a0, string
	la	$a1, 200	# Reads upto a max of 200 characters
	li	$v0, 8
	syscall
	la	$t0,($a0)	# Entered string is stored in the t0 register
	li	$t1, 0		# track string length 
	
	# Prompts user for key (shift amount)
	la	$a0, shiftAmt	
	li	$v0, 4
	syscall
	li 	$v0, 5
	syscall
	move 	$t3, $v0	# stores the key value in register t3

decryptChar:
	lb	$t4, 0($t0)	# First character is read
	beq	$t4, 10, exit	# Terminate program on \n 
	beqz	$t4, exit	# Terminate program when the end of the string is reached 
	jal	d_chkLowercase 	# Check for lower case characters

	# falls through to decryptChar2
	
decryptChar2:
	beq	$v0, 1, decryptLowercaseChar 	# Decrypt lower case characters
	beq	$v0, 0, decryptUppercaseChar 	# Decrypt Upper case characters
	move	$a0, $t4  			# If not upper case or lower
 
d_printChar:
	li	$v0, 11		# Print the decrypted character one character at a time
	syscall
	add	$t0, $t0, 1	# Points to the next character
	add	$t1, $t1, 1	# length is incremented
	j	decryptChar

exit:
	li	$v0, 4			# Prompts if user wishes to continue or exit by entering 1 or 0 respectively.
	la	$a0, continuemsg
	syscall

	li	$v0, 5			# Read reply
	syscall
	
	addi	$t0, $v0, 0		# $t0 holds the reply
	beq 	$t0, 1, main

	li	$v0, 4
	la	$a0, exitmsg
	syscall

	li	$v0, 10
	syscall
	
# Methods for encryption
# Encryption(Letter)= ASCII(BaseCharacter (A/a)) + (ASCII(Letter) - (ASCII(BaseCharacter (A/a)) + Key) % 26

e_chkLowercase:
	bgt	$t4, 122, e_notLowerOrUpper		# if the character is not lower case or upper case (ASCII 112 -> z)
	blt	$t4, 97, e_chkUpperOrAnotherChar	# if the character is not lower case (ASCII 97 -> a)
	li	$v0, 1   				# store value 1 in register v0 if the character is a lower case character
	jr	$ra    					
	
e_notLowerOrUpper:
	li	$v0, 2				# store value 2 in register vO if the character is not lower or uppercase
	j	encryptChar2	
	
e_chkUpperOrAnotherChar:
	blt	$t4, 65, e_notLowerOrUpper	# if the character < 65
	bgt	$t4, 91, e_notLowerOrUpper 	# and if character > 91 then the character is neither upper or lowercase
	li	$v0, 0				# store value 0 in register v0 if the character is upper case
	j	encryptChar2
 
encryptLowercaseChar:
	li	$t5, 26			# Encrypt lowercase characters
	sub	$t4, $t4, 97
	add	$t4, $t4, $t3		# add key to char
	div	$t4, $t5		# div by 26 for modulo operation
	mfhi	$a0			# moves remainder from hi register
	addi	$a0, $a0, 97
	j	e_printChar
 
encryptUppercaseChar:
	li	$t5, 26   		# Encrypt uppercase characters
	sub	$t4, $t4, 65
	add	$t4, $t4, $t3
	div	$t4, $t5
	mfhi	$a0
	addi	$a0, $a0, 65
	j	e_printChar
 
# Methods for Decryption
# Decryption(Letter) = ASCII(BaseCharacter (A/a)) + (ASCII(Letter) - (ASCII(BaseCharacter (A/a)) - Key) % 26

d_chkLowercase:
	bgt	$t4, 122, d_notLowerOrUpper 		# if the character is not lower or upper case (ASCII 122 -> z)
	blt	$t4, 97, d_chkUpperOrAnotherChar	# if the character is not lower case (ASCII 97 -> a)
	li	$v0, 1    				# store value 1 in register v0 if the decrypt character is lower case
	jr	$ra
 
d_notLowerOrUpper:
	li	$v0, 2   				# store value 2 in register V0 if the decrypt character is not upper or lower case
	j	decryptChar2
 
d_chkUpperOrAnotherChar:
	blt	$t4, 65, d_notLowerOrUpper 		# if the character is < 65
	bgt	$t4, 91, d_notLowerOrUpper 		# and the character is > 91 then the character is neither upper or lower case
	li	$v0, 0   				# store value 0 in the v0 register if the character is upper case
	j	decryptChar2
 
decryptLowercaseChar:
	li	$t5, 26   				# Decrypt lower case characters
	sub	$t4, $t4, 97
	sub	$t4, $t4, $t3
	sub	$t6, $zero, $t4
	li	$t7, 1
 
handleModNegative:
	mul	$s0, $t5, $t7
	bgt	$s0, $t6, calcCharLower
	addi	$t7, $t7, 1
	j	handleModNegative

calcCharLower:
	add	$t4, $s0, $t4
	div	$t4, $t5
	mfhi	$a0
	addi	$a0, $a0, 97
	j	d_printChar
 
decryptUppercaseChar:
	li	$t5, 26   				# Decrypt Uppercase characters
	sub	$t4, $t4, 65				# 65 > A
	sub	$t4, $t4, $t3
	sub	$t6, $zero, $t4
	li	$t7, 1

handleModNegativeUpper:
	mul	$s0, $t5, $t7
	bgt	$s0, $t6, calcCharUpper
	addi	$t7, $t7, 1
	j	handleModNegativeUpper
 
calcCharUpper:
	add	$t4, $s0, $t4
	div	$t4, $t5
	mfhi	$a0
	addi	$a0, $a0, 65
	j	d_printChar
